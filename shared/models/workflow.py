"""
Workflow state and data models
"""

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field


class StageStatus(str, Enum):
    """Status of a workflow stage"""

    PENDING = "pending"
    IN_PROGRESS = "in_progress"
    COMPLETED = "completed"
    FAILED = "failed"
    ESCALATED = "escalated"


class AgentType(str, Enum):
    """Types of agents in the system"""

    MARKET_ANALYST = "market_analyst"
    SOLUTION_ARCHITECT = "solution_architect"
    PRODUCT_MANAGER = "product_manager"
    SOFTWARE_ARCHITECT = "software_architect"
    JUNIOR_DEVELOPER = "junior_developer"
    SENIOR_DEVELOPER = "senior_developer"
    QA_ENGINEER = "qa_engineer"
    DEVOPS_ENGINEER = "devops_engineer"


class StageResult(BaseModel):
    """Result from a workflow stage"""

    stage_name: str
    agent_type: AgentType
    status: StageStatus
    started_at: datetime
    completed_at: Optional[datetime] = None
    output: Dict[str, Any] = Field(default_factory=dict)
    artifacts: List[Dict[str, Any]] = Field(default_factory=list)
    errors: List[str] = Field(default_factory=list)
    metadata: Dict[str, Any] = Field(default_factory=dict)


class WorkflowState(BaseModel):
    """Overall workflow state"""

    workflow_id: str
    project_idea: str
    created_at: datetime = Field(default_factory=datetime.utcnow)
    updated_at: datetime = Field(default_factory=datetime.utcnow)
    current_stage: str
    stages: List[StageResult] = Field(default_factory=list)
    global_context: Dict[str, Any] = Field(default_factory=dict)

    def add_stage_result(self, result: StageResult):
        """Add a stage result and update timestamp"""
        self.stages.append(result)
        self.updated_at = datetime.utcnow()

    def get_stage_output(self, stage_name: str) -> Optional[Dict[str, Any]]:
        """Get output from a specific stage"""
        for stage in self.stages:
            if stage.stage_name == stage_name and stage.status == StageStatus.COMPLETED:
                return stage.output
        return None

    def get_all_artifacts(self) -> List[Dict[str, Any]]:
        """Get all artifacts from all stages"""
        artifacts = []
        for stage in self.stages:
            artifacts.extend(stage.artifacts)
        return artifacts


class ProjectSpecification(BaseModel):
    """Detailed project specification generated through the workflow"""

    project_name: str
    description: str
    market_validation: Dict[str, Any]
    technical_architecture: Dict[str, Any]
    user_stories: List[Dict[str, Any]]
    development_plan: Dict[str, Any]
    deployment_strategy: Dict[str, Any]
    estimated_timeline: str
    estimated_budget: Optional[str] = None


class CodeArtifact(BaseModel):
    """Code artifact generated by developer agents"""

    filename: str
    filepath: str
    language: str
    content: str
    tests: List[str] = Field(default_factory=list)
    documentation: Optional[str] = None
    review_status: str = "pending"
    issues: List[str] = Field(default_factory=list)


class EscalationRequest(BaseModel):
    """Request to escalate from junior to senior developer"""

    requesting_agent: AgentType
    reason: str
    context: Dict[str, Any]
    attempted_solutions: List[str]
    error_messages: List[str]
    code_snippet: Optional[str] = None
    priority: str = "medium"  # low, medium, high, critical
